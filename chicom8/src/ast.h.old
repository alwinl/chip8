/*
 * ast.h Copyright 2025 Alwin Leerling dna.leerling@gmail.com
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 */

#pragma once

#include <memory>
#include <string>
#include <variant>
#include <vector>

enum class ExprType
{
    NumberLiteral,
    Variable,
    Binary
};

enum class StmtType
{
    Let
};

// Expressions
struct Expr
{
    ExprType type;
    virtual ~Expr() = default;
};

struct NumberLiteral : Expr
{
    NumberLiteral(int val) : value(val) {
        type = ExprType::NumberLiteral;
    }

    int value;
};

struct Variable : Expr
{
    Variable(const std::string& name) : name(name) {
        type = ExprType::Variable;
    }

    std::string name;
};

struct BinaryExpr : Expr
{
    BinaryExpr(std::unique_ptr<Expr> l, std::string o, std::unique_ptr<Expr> r)
        : left(std::move(l)), op(std::move(o)), right(std::move(r)) {
        type = ExprType::Binary;
    }

    std::unique_ptr<Expr> left;
    std::string op;
    std::unique_ptr<Expr> right;
};

// Statements
struct Stmt
{
    StmtType type;
    virtual ~Stmt() = default;
};

struct LetStmt : Stmt
{
    LetStmt(std::string name, std::unique_ptr<Expr> init)
        : name(std::move(name)), initializer(std::move(init)) {
        type = StmtType::Let;
    }

    std::string name;
    std::unique_ptr<Expr> initializer;
};
